/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface NFTOptInterface extends utils.Interface {
  functions: {
    "cancelOption(uint32)": FunctionFragment;
    "createOption(uint32)": FunctionFragment;
    "exerciseOption(uint32)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "optionID()": FunctionFragment;
    "options(uint256)": FunctionFragment;
    "publishOptionRequest(address,uint32,uint256,uint32,uint8)": FunctionFragment;
    "withdrawOptionRequest(uint32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelOption"
      | "createOption"
      | "exerciseOption"
      | "getBalance"
      | "optionID"
      | "options"
      | "publishOptionRequest"
      | "withdrawOptionRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseOption",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "optionID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "options",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publishOptionRequest",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOptionRequest",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciseOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "optionID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "options", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishOptionRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOptionRequest",
    data: BytesLike
  ): Result;

  events: {
    "Fallback(address,uint256)": EventFragment;
    "Filled(address,uint256)": EventFragment;
    "NewRequest(address,uint256)": EventFragment;
    "Received(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Fallback"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Filled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export interface FallbackEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type FallbackEvent = TypedEvent<
  [string, BigNumber],
  FallbackEventObject
>;

export type FallbackEventFilter = TypedEventFilter<FallbackEvent>;

export interface FilledEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type FilledEvent = TypedEvent<[string, BigNumber], FilledEventObject>;

export type FilledEventFilter = TypedEventFilter<FilledEvent>;

export interface NewRequestEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type NewRequestEvent = TypedEvent<
  [string, BigNumber],
  NewRequestEventObject
>;

export type NewRequestEventFilter = TypedEventFilter<NewRequestEvent>;

export interface ReceivedEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  ReceivedEventObject
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface NFTOpt extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTOptInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exerciseOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    optionID(overrides?: CallOverrides): Promise<[BigNumber]>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        buyer: string;
        seller: string;
        nftContract: string;
        nftId: number;
        interval: number;
        startDate: BigNumber;
        premium: BigNumber;
        strikePrice: BigNumber;
        flavor: number;
        state: number;
      }
    >;

    publishOptionRequest(
      _nftContract: string,
      _nftId: BigNumberish,
      _strikePrice: BigNumberish,
      _interval: BigNumberish,
      _flavor: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawOptionRequest(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelOption(
    _optionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOption(
    _optionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exerciseOption(
    _optionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  optionID(overrides?: CallOverrides): Promise<BigNumber>;

  options(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number
    ] & {
      buyer: string;
      seller: string;
      nftContract: string;
      nftId: number;
      interval: number;
      startDate: BigNumber;
      premium: BigNumber;
      strikePrice: BigNumber;
      flavor: number;
      state: number;
    }
  >;

  publishOptionRequest(
    _nftContract: string,
    _nftId: BigNumberish,
    _strikePrice: BigNumberish,
    _interval: BigNumberish,
    _flavor: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawOptionRequest(
    _optionId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOption(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createOption(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    exerciseOption(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    optionID(overrides?: CallOverrides): Promise<BigNumber>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number
      ] & {
        buyer: string;
        seller: string;
        nftContract: string;
        nftId: number;
        interval: number;
        startDate: BigNumber;
        premium: BigNumber;
        strikePrice: BigNumber;
        flavor: number;
        state: number;
      }
    >;

    publishOptionRequest(
      _nftContract: string,
      _nftId: BigNumberish,
      _strikePrice: BigNumberish,
      _interval: BigNumberish,
      _flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawOptionRequest(
      _optionId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Fallback(address,uint256)"(arg0?: null, arg1?: null): FallbackEventFilter;
    Fallback(arg0?: null, arg1?: null): FallbackEventFilter;

    "Filled(address,uint256)"(arg0?: null, arg1?: null): FilledEventFilter;
    Filled(arg0?: null, arg1?: null): FilledEventFilter;

    "NewRequest(address,uint256)"(
      arg0?: null,
      arg1?: null
    ): NewRequestEventFilter;
    NewRequest(arg0?: null, arg1?: null): NewRequestEventFilter;

    "Received(address,uint256)"(arg0?: null, arg1?: null): ReceivedEventFilter;
    Received(arg0?: null, arg1?: null): ReceivedEventFilter;
  };

  estimateGas: {
    cancelOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exerciseOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    optionID(overrides?: CallOverrides): Promise<BigNumber>;

    options(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    publishOptionRequest(
      _nftContract: string,
      _nftId: BigNumberish,
      _strikePrice: BigNumberish,
      _interval: BigNumberish,
      _flavor: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawOptionRequest(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exerciseOption(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publishOptionRequest(
      _nftContract: string,
      _nftId: BigNumberish,
      _strikePrice: BigNumberish,
      _interval: BigNumberish,
      _flavor: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOptionRequest(
      _optionId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
