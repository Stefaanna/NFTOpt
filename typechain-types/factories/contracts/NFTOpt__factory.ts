/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NFTOpt, NFTOptInterface } from "../../contracts/NFTOpt";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "providedAddress",
        type: "address",
      },
    ],
    name: "INVALID_ADDRESS",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "providedId",
        type: "uint32",
      },
    ],
    name: "INVALID_OPTION_ID",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_optionId",
        type: "uint32",
      },
    ],
    name: "cancelOption",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_optionId",
        type: "uint32",
      },
    ],
    name: "createOption",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_optionId",
        type: "uint32",
      },
    ],
    name: "exerciseOption",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "options",
    outputs: [
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expirationInterval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "strikePrice",
        type: "uint256",
      },
      {
        internalType: "enum NFTOpt.OptionFlavor",
        name: "flavor",
        type: "uint8",
      },
      {
        internalType: "enum NFTOpt.OptionState",
        name: "state",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_premium",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_strikePrice",
        type: "uint256",
      },
      {
        internalType: "enum NFTOpt.OptionFlavor",
        name: "_flavor",
        type: "uint8",
      },
    ],
    name: "publishOptionRequest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_optionId",
        type: "uint32",
      },
    ],
    name: "withdrawOptionRequest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061058b806100206000396000f3fe6080604052600436106100555760003560e01c80631d973ac51461005a578063292a274f14610076578063409e2205146100925780635a3ddf22146100d85780636e89319a146100f4578063d0a3021e14610110575b600080fd5b610074600480360381019061006f91906102cb565b61012c565b005b610090600480360381019061008b9190610382565b610133565b005b34801561009e57600080fd5b506100b960048036038101906100b491906103af565b610136565b6040516100cf9a999897969594939291906104b9565b60405180910390f35b6100f260048036038101906100ed9190610382565b610204565b005b61010e60048036038101906101099190610382565b610207565b005b61012a60048036038101906101259190610382565b61020a565b005b5050505050565b50565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff16908060080160019054906101000a900460ff1690508a565b50565b50565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061023d82610212565b9050919050565b61024d81610232565b811461025857600080fd5b50565b60008135905061026a81610244565b92915050565b6000819050919050565b61028381610270565b811461028e57600080fd5b50565b6000813590506102a08161027a565b92915050565b600281106102b357600080fd5b50565b6000813590506102c5816102a6565b92915050565b600080600080600060a086880312156102e7576102e661020d565b5b60006102f58882890161025b565b955050602061030688828901610291565b945050604061031788828901610291565b935050606061032888828901610291565b9250506080610339888289016102b6565b9150509295509295909350565b600063ffffffff82169050919050565b61035f81610346565b811461036a57600080fd5b50565b60008135905061037c81610356565b92915050565b6000602082840312156103985761039761020d565b5b60006103a68482850161036d565b91505092915050565b6000602082840312156103c5576103c461020d565b5b60006103d384828501610291565b91505092915050565b6103e581610232565b82525050565b6103f481610270565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6002811061043a576104396103fa565b5b50565b600081905061044b82610429565b919050565b600061045b8261043d565b9050919050565b61046b81610450565b82525050565b60038110610482576104816103fa565b5b50565b600081905061049382610471565b919050565b60006104a382610485565b9050919050565b6104b381610498565b82525050565b6000610140820190506104cf600083018d6103dc565b6104dc602083018c6103dc565b6104e9604083018b6103dc565b6104f6606083018a6103eb565b61050360808301896103eb565b61051060a08301886103eb565b61051d60c08301876103eb565b61052a60e08301866103eb565b610538610100830185610462565b6105466101208301846104aa565b9b9a505050505050505050505056fea2646970667358221220ddd98fe64b34c7404881f446d40b8fe4da1ed4e647d3b3272dd41b43fdabffd364736f6c634300080e0033";

type NFTOptConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTOptConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTOpt__factory extends ContractFactory {
  constructor(...args: NFTOptConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NFTOpt> {
    return super.deploy(overrides || {}) as Promise<NFTOpt>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTOpt {
    return super.attach(address) as NFTOpt;
  }
  override connect(signer: Signer): NFTOpt__factory {
    return super.connect(signer) as NFTOpt__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTOptInterface {
    return new utils.Interface(_abi) as NFTOptInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NFTOpt {
    return new Contract(address, _abi, signerOrProvider) as NFTOpt;
  }
}
