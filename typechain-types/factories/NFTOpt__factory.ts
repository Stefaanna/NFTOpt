/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NFTOpt, NFTOptInterface } from "../NFTOpt";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_optionId",
        type: "uint32",
      },
    ],
    name: "cancelOption",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_optionId",
        type: "uint32",
      },
    ],
    name: "createOption",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_optionId",
        type: "uint32",
      },
    ],
    name: "exerciseOption",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "options",
    outputs: [
      {
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "nftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "startDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expirationInterval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "strikePrice",
        type: "uint256",
      },
      {
        internalType: "enum NFTOpt.OptionFlavor",
        name: "flavor",
        type: "uint8",
      },
      {
        internalType: "enum NFTOpt.OptionState",
        name: "state",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_nftContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_nftId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_premium",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_strikePrice",
        type: "uint256",
      },
      {
        internalType: "enum NFTOpt.OptionFlavor",
        name: "_flavor",
        type: "uint8",
      },
    ],
    name: "publishOptionRequest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "_optionId",
        type: "uint32",
      },
    ],
    name: "withdrawOptionRequest",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061057a806100206000396000f3fe6080604052600436106100555760003560e01c80631d973ac51461005a578063292a274f14610076578063409e2205146100925780635a3ddf22146100d85780636e89319a146100f4578063d0a3021e14610110575b600080fd5b610074600480360381019061006f9190610261565b61012c565b005b610090600480360381019061008b9190610301565b610133565b005b34801561009e57600080fd5b506100b960048036038101906100b491906102d8565b610136565b6040516100cf9a99989796959493929190610366565b60405180910390f35b6100f260048036038101906100ed9190610301565b610204565b005b61010e60048036038101906101099190610301565b610207565b005b61012a60048036038101906101259190610301565b61020a565b005b5050505050565b50565b60026020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154908060060154908060070154908060080160009054906101000a900460ff16908060080160019054906101000a900460ff1690508a565b50565b50565b50565b60008135905061021c816104ef565b92915050565b60008135905061023181610506565b92915050565b60008135905061024681610516565b92915050565b60008135905061025b8161052d565b92915050565b600080600080600060a0868803121561027957600080fd5b60006102878882890161020d565b955050602061029888828901610237565b94505060406102a988828901610237565b93505060606102ba88828901610237565b92505060806102cb88828901610222565b9150509295509295909350565b6000602082840312156102ea57600080fd5b60006102f884828501610237565b91505092915050565b60006020828403121561031357600080fd5b60006103218482850161024c565b91505092915050565b61033381610402565b82525050565b61034281610474565b82525050565b61035181610486565b82525050565b6103608161045a565b82525050565b60006101408201905061037c600083018d61032a565b610389602083018c61032a565b610396604083018b61032a565b6103a3606083018a610357565b6103b06080830189610357565b6103bd60a0830188610357565b6103ca60c0830187610357565b6103d760e0830186610357565b6103e5610100830185610339565b6103f3610120830184610348565b9b9a5050505050505050505050565b600061040d8261043a565b9050919050565b6000819050610422826104c7565b919050565b6000819050610435826104db565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600061047f82610414565b9050919050565b600061049182610427565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106104d8576104d7610498565b5b50565b600381106104ec576104eb610498565b5b50565b6104f881610402565b811461050357600080fd5b50565b6002811061051357600080fd5b50565b61051f8161045a565b811461052a57600080fd5b50565b61053681610464565b811461054157600080fd5b5056fea264697066735822122041a86ce05793dabe4e4602fcabd1ab204e7454c237bbd61e0f91f344ffa1b14464736f6c63430008040033";

type NFTOptConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NFTOptConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NFTOpt__factory extends ContractFactory {
  constructor(...args: NFTOptConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NFTOpt> {
    return super.deploy(overrides || {}) as Promise<NFTOpt>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NFTOpt {
    return super.attach(address) as NFTOpt;
  }
  override connect(signer: Signer): NFTOpt__factory {
    return super.connect(signer) as NFTOpt__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NFTOptInterface {
    return new utils.Interface(_abi) as NFTOptInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): NFTOpt {
    return new Contract(address, _abi, signerOrProvider) as NFTOpt;
  }
}
